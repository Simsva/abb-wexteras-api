<?php // -*- mode: php; -*-
// vim: ft=php sw=2 ts=2 et

// Load config
$config = include("./config/wexteras.php");

// CORS
header("Access-Control-Allow-Origin: " . $config["origin"]);
header("Access-Control-Allow-Headers: Authorization, Origin, Content-Type, X-Auth-Token");
header("Access-Control-Allow-Methods: GET, POST, PATCH, DELETE");
header("Access-Control-Allow-Credentials: true");

// Save PATCH request data
parse_str(file_get_contents('php://input'), $_PATCH);

// Get input variables
$api_vars = preg_split("/\//", ltrim($_SERVER["PATH_INFO"], '/'));
parse_str($_SERVER["QUERY_STRING"], $query_vars);

// Filter out empty variables
$api_vars = array_filter($api_vars, static function($var){return $var !== NULL && $var !== "";} );

$api_url = "{$_SERVER["REQUEST_SCHEME"]}://{$_SERVER["HTTP_HOST"]}{$_SERVER["SCRIPT_NAME"]}";

// Connect to Postgres
$pg_auth = "";
foreach(array("host", "dbname", "user", "password") as $key) {
  if(array_key_exists($key, $config))
    $pg_auth .= " " . $key . "=" . $config[$key];
}
// $pg_auth = "host=" . $config["host"] . " dbname=" . $config["dbname"] . " user=" . $config["user"] . " password=" . $config["password"];
$dbconn = pg_connect(ltrim($pg_auth))
  or die("Could not connect to Postgres: " . pg_last_error());

// Get only specified fields/columns from Postgres query
// Safer than using user controlled data in the query
function get_fields($result, $fields, $types) {
  if (isset($fields) && $fields !== "*") {
    $fields = preg_split("/,/", $fields);

    $out = array();
    while ($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
      foreach ($fields as $field) {
        if (isset($row[$field])) {
          $row[$field] = parse_type($row[$field], $types[$field]??"string");
        }
      }
      $out[] = $row;
    }
  } else {
    $out = array();
    while($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
      foreach(array_keys($row) as $field) {
        $row[$field] = parse_type($row[$field], $types[$field]??"string");
      }
      $out[] = $row;
    }
  }
  return $out;
}

function sql_bool($x) {
  return ($x == "t")
       ? "true"
       : (($x == "f")
       ? "false"
       : $x);
}

function parse_type($var, $type) {
  $o = array("flags"=>FILTER_NULL_ON_FAILURE);
  switch($type) {
  case "int":
    $var = filter_var($var, FILTER_VALIDATE_INT, $o);
    break;

  case "float":
    $var = filter_var($var, FILTER_VALIDATE_FLOAT, $o);
    break;

  case "bool":
    $var = filter_var(sql_bool($var), FILTER_VALIDATE_BOOL, $o);
    break;
  }

  return $var;
}

function require_args($vars, $len) {
  if (sizeof($vars) < $len) {
    http_response_code(400);
    die("Invalid arguments");
  }
  return true;
}

$field_types = array(
  "data" => array(
    "t" => "int",
    "temp" => "float",
    "humidity" => "float",
    "id" => "int",
  ),
  "settings" => array(
    "id" => "int",
    "rpm" => "int",
    "door" => "bool",
    "master" => "bool",
  ),
);

$method = "{$_SERVER["REQUEST_METHOD"]} {$api_vars[0]}";
switch ($method) {
case "GET data":
  if (!isset($query_vars["id"])) {
    http_response_code(400);
    die("id query argument needs to be provied");
  }

  $i = 1;
  $sql = "SELECT * FROM data_unix";
  $vars = array();

  // Limit
  $limit = "";
  if(isset($query_vars["limit"]) and is_numeric($query_vars["limit"])) {
    $limit .= " LIMIT $" . $i++;
    $vars[] = $query_vars["limit"];
  }

  $where = " WHERE id = $" . $i++;
  $vars[] = $query_vars["id"];

  // "Frame"
  if(isset($query_vars["before"]) and is_numeric($query_vars["before"])) {
    $where .= " AND t < $" . $i++;
    $vars[] = $query_vars["before"];
  }
  if(isset($query_vars["after"]) and is_numeric($query_vars["after"])) {
    $where .= " AND t > $" . $i++;
    $vars[] = $query_vars["after"];
  }

  // Request
  $sql .= $where . " ORDER BY t ASC" . $limit;
  pg_prepare($dbconn, "get_data", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "get_data", $vars);

  $data = json_encode(get_fields($result, $query_vars["fields"]??null, $field_types["data"]??null));
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "GET settings":
  if (!isset($query_vars["id"])) {
    http_response_code(400);
    die("id query argument needs to be provied");
  }

  $i = 1;
  $sql = "SELECT * FROM controls WHERE id = $" . $i++;
  $vars = array($query_vars["id"]);

  pg_prepare($dbconn, "get_controls", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "get_controls", $vars);

  $data = json_encode(get_fields($result, $query_vars["fields"]??null, $field_types["settings"]??null)[0]??null);
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "GET dump":
  echo "\$_SERVER: ";     print_r($_SERVER);
  echo "<br/>\$_POST: ";  print_r($_POST);
  echo "<br/>\$_PATCH: "; print_r($_PATCH);
  break;

default:
  http_response_code(400);
  die("Invalid method: " . $method);
}
