<?php // -*- mode: php; -*-
// vim: ft=php sw=2 ts=2 et

// Load config
$config = include("./config/wexteras.php");

// CORS
header("Access-Control-Allow-Origin: " . $config["origin"]);
header("Access-Control-Allow-Methods: GET, POST, PATCH, OPTIONS");
header("Access-Control-Allow-Credentials: true");

if($_SERVER["REQUEST_METHOD"] === "OPTIONS") {
  header("Access-Control-Allow-Headers: Origin, Content-Type, Accept, X-Requested-With");
  header("Access-Control-Max-Age: 86400");
  header("Cache-Control: public, max-age=86400");
  header("Vary: origin");
  exit(0);
}

// Save PATCH request data
switch($_SERVER["CONTENT_TYPE"]) {
case "application/json":
  $_PATCH = json_decode(file_get_contents("php://input"));
  break;

default:
  parse_str(file_get_contents("php://input"), $_PATCH);
  break;
}

// Get input variables
$api_vars = preg_split("/\//", ltrim($_SERVER["PATH_INFO"], '/'));
parse_str($_SERVER["QUERY_STRING"], $query_vars);

// Filter out empty variables
$api_vars = array_filter($api_vars, static function($var){return $var !== NULL && $var !== "";} );

$api_url = "{$_SERVER["REQUEST_SCHEME"]}://{$_SERVER["HTTP_HOST"]}{$_SERVER["SCRIPT_NAME"]}";

// Connect to Postgres
$pg_auth = "";
foreach(array("host", "dbname", "user", "password") as $key) {
  if(array_key_exists($key, $config))
    $pg_auth .= " " . $key . "=" . $config[$key];
}
// $pg_auth = "host=" . $config["host"] . " dbname=" . $config["dbname"] . " user=" . $config["user"] . " password=" . $config["password"];
$dbconn = pg_connect(ltrim($pg_auth))
  or die("Could not connect to Postgres: " . pg_last_error());

// Get only specified fields/columns from Postgres query
// Safer than using user controlled data in the query
function get_fields($result, $fields, $types) {
  if (isset($fields) && $fields !== "*") {
    $fields = preg_split("/,/", $fields);

    $out = array();
    while ($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
      $filtered_row = array();
      foreach ($fields as $field) {
        if (isset($row[$field])) {
          $filtered_row[$field] = parse_type($row[$field], $types[$field]??"string");
        }
      }
      $out[] = $filtered_row;
    }
  } else {
    $out = array();
    while($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
      foreach($row as $field => &$val) {
        $val = parse_type($val, $types[$field]??"string");
      }
      $out[] = $row;
    }
  }
  return $out;
}

function sql_bool($x) {
  return ($x == "t")
       ? "true"
       : (($x == "f")
       ? "false"
       : $x);
}

function as_sql_bool($x) {
  return ($x == true)
       ? "t"
       : (($x == false)
       ? "f"
       : $x);
}

function parse_type($var, $type) {
  $o = array("flags"=>FILTER_NULL_ON_FAILURE);
  switch($type) {
  case "int":
    $var = filter_var($var, FILTER_VALIDATE_INT, $o);
    break;

  case "float":
    $var = filter_var($var, FILTER_VALIDATE_FLOAT, $o);
    break;

  case "bool":
    $var = filter_var(sql_bool($var), FILTER_VALIDATE_BOOL, $o);
    break;
  }

  return $var;
}

function require_args($vars, $len) {
  if (sizeof($vars) < $len) {
    http_response_code(400);
    die("Invalid arguments");
  }
  return true;
}

$field_types = array(
  "data" => array(
    "t" => "int",
    "temp" => "float",
    "humidity" => "float",
    "id" => "int",
  ),
  "settings" => array(
    "id" => "int",
    "rpm" => "int",
    "water" => "int",
    "door" => "int",
    "master" => "bool",
  ),
);

$method = "{$_SERVER["REQUEST_METHOD"]} {$api_vars[0]}";
switch ($method) {
case "GET data":
  if (!isset($query_vars["id"])) {
    http_response_code(400);
    die("'id' query argument needs to be provied");
  }

  $i = 1;
  $sql = "SELECT * FROM data_unix";
  $vars = array();

  // Limit
  $limit = "";
  if(isset($query_vars["limit"]) and is_numeric($query_vars["limit"])) {
    $limit .= " LIMIT $" . $i++;
    $vars[] = $query_vars["limit"];
  }

  $where = " WHERE id = $" . $i++;
  $vars[] = $query_vars["id"];

  // Timeframe
  if(isset($query_vars["before"]) and is_numeric($query_vars["before"])) {
    $where .= " AND t < $" . $i++;
    $vars[] = $query_vars["before"];
  }
  if(isset($query_vars["after"]) and is_numeric($query_vars["after"])) {
    $where .= " AND t > $" . $i++;
    $vars[] = $query_vars["after"];
  }

  // Request
  $sql .= $where . " ORDER BY t ASC" . $limit;
  pg_prepare($dbconn, "get_data", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "get_data", $vars);

  $data = json_encode(get_fields($result, $query_vars["fields"]??null, $field_types["data"]??null));
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "POST data":
  if (!isset($_POST["id"]) || !isset($_POST["token"])) {
    http_response_code(400);
    die("'id' ans 'token' POST arguments needs to be provied");
  }

  $sql = "SELECT token FROM devices WHERE id = $1";
  pg_prepare($dbconn, "get_token", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "get_token", array($_POST["id"]));
  $token = pg_fetch_result($result, 0, "token");
  if($token != $_POST["token"]) {
    http_response_code(401);
    die("invalid token for id " . $_POST["id"]);
  }

  $sql = "INSERT INTO data (id, temp, humidity) VALUES ($1, $2, $3)";
  $vars = array(
    $_POST["id"],
    isset($_POST["temp"]) ? $_POST["temp"] : -1024.0,
    isset($_POST["humidity"]) ? $_POST["humidity"] : -1024.0
  );
  pg_prepare($dbconn, "post_data", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  pg_execute($dbconn, "post_data", $vars);

  break;

case "GET settings":
  if (!isset($query_vars["id"])) {
    http_response_code(400);
    die("'id' query argument needs to be provied");
  }

  $i = 1;
  $sql = "SELECT * FROM controls WHERE id = $" . $i++;
  $vars = array($query_vars["id"]);

  pg_prepare($dbconn, "get_controls", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "get_controls", $vars);

  $data = json_encode(get_fields($result, $query_vars["fields"]??null, $field_types["settings"]??null)[0]??null);
  if($data == "null") http_response_code(404);
  echo $data;
  break;

case "PATCH settings":
  if (!isset($query_vars["id"])) {
    http_response_code(400);
    die("'id' query argument needs to be provied");
  }

  $allowed_keys = array(
    "rpm" => "int",
    "water" => "int",
    "door" => "int",
    "master" => "bool",
  );

  $keys = "";
  $vars = array($query_vars["id"]);
  $i = 2;
  foreach($_PATCH as $key => $val) {
    if(array_key_exists($key, $allowed_keys)) {
      $keys .= "{$key} = $" . $i++ . ", ";
      $tmp = parse_type($val, $allowed_keys[$key]);
      if($allowed_keys[$key] == "bool")
        $tmp = as_sql_bool($tmp);
      /* NOTE: in PHP 0 == false == null so this does not work */
      //   ($tmp == null) {
      //   http_response_code(400);
      //   die("{$key} cannot be null");
      // }
      $vars[] = $tmp;
    } else {
      http_response_code(400);
      die("Disallowed key: '{$key}'");
    }
  }
  $keys = rtrim($keys, ", ");

  if($keys == "") {
    http_response_code(400);
    die("Nothing specified in request body");
  }

  $sql = "UPDATE controls SET " . $keys . " WHERE id = $1";
  pg_prepare($dbconn, "patch_settings", $sql)
    or die("Failed to prepare query: " . pg_last_error());
  $result = pg_execute($dbconn, "patch_settings", $vars);
    // or die("Failed to execute query: " . pg_last_error());
  break;

case "GET dump":
case "POST dump":
case "PATCH dump":
  echo "\$_SERVER: ";     print_r($_SERVER);
  echo "<br/>\$_POST: ";  print_r($_POST);
  echo "<br/>\$_PATCH: "; print_r($_PATCH);
  break;

default:
  http_response_code(404);
  die("Invalid method: " . $method);
}
